syntax = "proto3";
package sainoe.registry.registry;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "registry/params.proto";
import "registry/consumer.proto";
import "registry/subscription.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sainoe/registry/x/registry/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sainoe/registry/registry/params";
  }
  // Queries a consumer by index.
	rpc Consumer(QueryGetConsumerRequest) returns (QueryGetConsumerResponse) {
		option (google.api.http).get = "/sainoe/registry/registry/consumer/{index}";
	}

	// Queries a list of consumer items.
	rpc ConsumerAll(QueryAllConsumerRequest) returns (QueryAllConsumerResponse) {
		option (google.api.http).get = "/sainoe/registry/registry/consumer";
	}

// Queries a subscription by index.
	rpc Subscription(QueryGetSubscriptionRequest) returns (QueryGetSubscriptionResponse) {
		option (google.api.http).get = "/sainoe/registry/registry/subscription/{index}";
	}

	// Queries a subscription by index.
	rpc SubscriptionByValidator(QueryGetSubscriptionByValidatorRequest) returns (QueryGetSubscriptionByValidatorResponse) {
		// option (google.api.http).get = "/sainoe/registry/registry/subscription/{index}";
	}

	// Queries a list of subscription items.
	rpc SubscriptionAll(QueryAllSubscriptionRequest) returns (QueryAllSubscriptionResponse) {
		option (google.api.http).get = "/sainoe/registry/registry/subscription";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetConsumerRequest {
	  string index = 1;

}

message QueryGetConsumerResponse {
	Consumer consumer = 1 [(gogoproto.nullable) = false];
}

message QueryAllConsumerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllConsumerResponse {
	repeated Consumer consumer = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSubscriptionRequest {
	string index = 1;
	string consumerID = 2;
}

message QueryGetSubscriptionResponse {
	Subscription subscription = 1 [(gogoproto.nullable) = false];
}

message QueryGetSubscriptionByValidatorRequest {
	string index = 1;

}

message QueryGetSubscriptionByValidatorResponse {
  repeated Subscription subscription = 1 [(gogoproto.nullable) = false];
}

message QueryAllSubscriptionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSubscriptionResponse {
	repeated Subscription subscription = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
